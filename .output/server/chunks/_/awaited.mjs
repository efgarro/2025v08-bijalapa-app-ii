import{i as r,j as t,r as s}from"./ssr.mjs";const n=Symbol.for("TSR_DEFERRED_PROMISE");function useAwaited({promise:t}){const s=function(t){const s=t;return s[n]||(s[n]={status:"pending"},s.then(r=>{s[n].status="success",s[n].data=r}).catch(t=>{s[n].status="error",s[n].error={data:r(t),__isServerError:!0}})),s}(t);if("pending"===s[n].status)throw s;if("error"===s[n].status)throw s[n].error;return[s[n].data,s]}function Await(r){const n=t.jsx(AwaitInner,{...r});return r.fallback?t.jsx(s.Suspense,{fallback:r.fallback,children:n}):n}function AwaitInner(r){const[t]=useAwaited(r);return r.children(t)}export{Await as A};
//# sourceMappingURL=awaited.mjs.map
